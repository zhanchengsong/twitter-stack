version: '3.1'

services:
  twitter-web:
    image: zhanchengdev/twitter-web:latest
    restart: always
    environment:
      AWS_ACCESS_KEY_ID: ${NODE_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${NODE_AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_USER_ICON_BUCKET: ${AWS_USER_ICON_BUCKET}
      PORT: ${NODE_PORT}
      ENV_TYPE : docker
    ports:
      - ${NODE_PORT}:${NODE_PORT}
    depends_on:
      - userservice
    
  userservice:
    image: zhanchengdev/userservice:latest
    restart: always
    ports: 
      - 3005:3005
    depends_on:
      - pgdb
    environment:
      PG_USERNAME: postgres
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DBNAME: ${PG_DBNAME}
      DB_TYPE: postgres
      DB_HOST: pgdb
      DB_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 3005
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: AKIATTWZPVHYKOAABEWU
      AWS_SECRET_ACCESS_KEY: 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
      AWS_USER_ICON_BUCKET: twitter-icons
  pgdb:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DBNAME}
    volumes:
      - db-data:/var/lib/postgresql/data

  nginx:
    image: nginx 
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 80:80
    environment:
      - NGINX_HOST=test-twitter.com
      - NGINX_PORT=80
    depends_on:
      - userservice
  
  mongo-db:
    image: 'mongo'
    restart: always
    container_name: 'twitter-mongo'
    environment: 
      - MONGO_INITDB_DATABASE=${MONGO_DBNAME}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ADMIN_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ADMIN_PASSWORD}
    ports:
      - '27017-27019:27017-27019'
    volumes:
      - ./config/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongo-data:/data/db
  
  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  redis:
    image: redis
    ports:
      - 6379:6379

  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - '9092:9092'
      - '9093:9093'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
  # DONOTCOMMIT !
  tweet:
    image: zhanchengdev/tweet:latest
    ports:
      - '3008:3008'
    environment:
      - SPRING_PROFILES_ACTIVE=kube
      - MONGO_URL=mongodb+srv://twitter-spring:bocJmhrOsJQDgaqh@twitterdata.94hzj.mongodb.net/twitter-data?retryWrites=true&w=majority  
      - AWS_SQS_URL=https://sqs.us-east-1.amazonaws.com/248490469872/Twitter-Notifications
      - AWS_ACCESS_KEY=AKIATTWZPVHYID2QI66Q 
      - AWS_ACCESS_KEY_SECRET=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 
      - AWS_REGION=us-east-1
      - KAFKA_BOOTSTRAP=kafka:9092
    depends_on:
      - kafka
volumes:
    redis-data:
    db-data:
    mongo-data:
    portainer_data:
    zookeeper_data:
    kafka_data: